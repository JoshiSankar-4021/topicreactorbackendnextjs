// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Education{
  eduId         Int @id @default(autoincrement())
  educationname String @db.VarChar(20)
  status   Int    @default(1) @db.SmallInt
  users    User[]
}

model User{
  userid    BigInt @id @default(autoincrement())
  firstname String @db.VarChar(100)
  lastname  String @db.VarChar(100)
  email     String @unique @db.VarChar(50)
  password  String @db.VarChar(50)
  address   String
  education Int
  phone     String @db.VarChar(10)
  gender    String @db.VarChar(1)
  author Education @relation(fields: [education], references: [eduId])
  status   Int    @default(1) @db.SmallInt
  topics Topic[]
  comments Comment[]
  posts Post[]
  likes PostLikes[]
}

model Topic{
  topicid BigInt @id @default(autoincrement())
  topic String @db.VarChar(100)
  reason  String @db.VarChar(1000)
  createdby BigInt
  createdon  DateTime @default(now())
  status Int @default(1) @db.SmallInt
  author User @relation(fields:[createdby],references:[userid])
  comments Comment[]
}

model Comment {
  commentid   BigInt   @id @default(autoincrement())
  comment     String   @db.VarChar(700)
  topicid     BigInt
  commentedby BigInt
  Commentedon DateTime @default(now())
  status   Int    @default(1) @db.SmallInt
  // Relations
  topic  Topic @relation(fields: [topicid], references: [topicid])
  author User  @relation(fields: [commentedby], references: [userid])
}

model Post{
  postid BigInt @id @default(autoincrement())
  caption String @db.VarChar(100000)
  fileurl String
  postedby BigInt
  postedon DateTime @default(now())
  likescount BigInt @default(0)
  dislikescount BigInt @default(0)
  sharecount BigInt @default(0)
  commentscount BigInt @default(0)
  repost BigInt @default(0)
  status Int @default(1) @db.SmallInt
  author User @relation(fields:[postedby],references:[userid])
  likes PostLikes[]
}

model PostLikes {
  likeid    BigInt      @id @default(autoincrement())
  postid    BigInt
  userid    BigInt
  createdAt DateTime @default(now())
  status Int @default(1) @db.SmallInt
  // Relations
  post Post @relation(fields: [postid], references: [postid], onDelete: Cascade)
  user User @relation(fields: [userid], references: [userid], onDelete: Cascade)
  // Unique
  @@unique([postid, userid])
}